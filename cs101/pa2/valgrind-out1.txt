==13911== Memcheck, a memory error detector
==13911== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13911== Using Valgrind-3.14.0.GIT-5d41dadeb3-20180914 and LibVEX; rerun with -h for copyright info
==13911== Command: Lex infile1.txt outfile1.txt
==13911== 
--13911-- Valgrind options:
--13911--    --leak-check=full
--13911--    -v
--13911-- Contents of /proc/version:
--13911--   Linux version 3.10.0-957.10.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC) ) #1 SMP Mon Mar 18 15:06:45 UTC 2019
--13911-- 
--13911-- Arch and hwcaps: AMD64, LittleEndian, amd64-cx16-rdtscp-sse3-avx
--13911-- Page sizes: currently 4096, max supported 4096
--13911-- Valgrind library directory: /opt/rh/devtoolset-8/root/usr/lib64/valgrind
--13911-- Reading syms from /afs/cats.ucsc.edu/users/m/swoog/cs101/pa2/Lex
--13911-- Reading syms from /usr/lib64/ld-2.17.so
--13911--   Considering /usr/lib/debug/.build-id/a5/27fe72908703c5972ae384e78d1850d1881ee7.debug ..
--13911--   .. build-id is valid
--13911-- Reading syms from /opt/rh/devtoolset-8/root/usr/lib64/valgrind/memcheck-amd64-linux
--13911--    object doesn't have a symbol table
--13911--    object doesn't have a dynamic symbol table
--13911-- Scheduler: using generic scheduler lock implementation.
--13911-- Reading suppressions file: /opt/rh/devtoolset-8/root/usr/lib64/valgrind/default.supp
==13911== embedded gdbserver: reading from /tmp/vgdb-pipe-from-vgdb-to-13911-by-swoog-on-unix2.lt.ucsc.edu
==13911== embedded gdbserver: writing to   /tmp/vgdb-pipe-to-vgdb-from-13911-by-swoog-on-unix2.lt.ucsc.edu
==13911== embedded gdbserver: shared mem   /tmp/vgdb-pipe-shared-mem-vgdb-13911-by-swoog-on-unix2.lt.ucsc.edu
==13911== 
==13911== TO CONTROL THIS PROCESS USING vgdb (which you probably
==13911== don't want to do, unless you know exactly what you're doing,
==13911== or are doing some strange experiment):
==13911==   /opt/rh/devtoolset-8/root/usr/lib64/valgrind/../../bin/vgdb --pid=13911 ...command...
==13911== 
==13911== TO DEBUG THIS PROCESS USING GDB: start GDB like this
==13911==   /path/to/gdb Lex
==13911== and then give GDB the following command
==13911==   target remote | /opt/rh/devtoolset-8/root/usr/lib64/valgrind/../../bin/vgdb --pid=13911
==13911== --pid is optional if only one valgrind process is running
==13911== 
--13911-- REDIR: 0x4019d60 (ld-linux-x86-64.so.2:strlen) redirected to 0x580c5bf5 (???)
--13911-- REDIR: 0x4019b30 (ld-linux-x86-64.so.2:index) redirected to 0x580c5c0f (???)
--13911-- Reading syms from /opt/rh/devtoolset-8/root/usr/lib64/valgrind/vgpreload_core-amd64-linux.so
--13911-- Reading syms from /opt/rh/devtoolset-8/root/usr/lib64/valgrind/vgpreload_memcheck-amd64-linux.so
==13911== WARNING: new redirection conflicts with existing -- ignoring it
--13911--     old: 0x04019d60 (strlen              ) R-> (0000.0) 0x580c5bf5 ???
--13911--     new: 0x04019d60 (strlen              ) R-> (2007.0) 0x04c2d070 strlen
--13911-- REDIR: 0x4019ce0 (ld-linux-x86-64.so.2:strcmp) redirected to 0x4c2e1c0 (strcmp)
--13911-- REDIR: 0x401a9a0 (ld-linux-x86-64.so.2:mempcpy) redirected to 0x4c31d70 (mempcpy)
--13911-- Reading syms from /usr/lib64/libc-2.17.so
--13911--   Considering /usr/lib/debug/usr/lib64/libc-2.17.so.debug ..
--13911--   .. CRC mismatch (computed 1bf8663f wanted 1812e268)
--13911-- REDIR: 0x4ec6700 (libc.so.6:strcasecmp) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4ec3480 (libc.so.6:strnlen) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4ec89d0 (libc.so.6:strncasecmp) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4ec5ee0 (libc.so.6:memset) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4ec5e90 (libc.so.6:memcpy@GLIBC_2.2.5) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4ec4e70 (libc.so.6:__GI_strrchr) redirected to 0x4c2ca30 (__GI_strrchr)
--13911-- REDIR: 0x4ebc160 (libc.so.6:malloc) redirected to 0x4c29dac (malloc)
--13911-- REDIR: 0x4edbef0 (libc.so.6:__GI_strstr) redirected to 0x4c32000 (__strstr_sse2)
--13911-- REDIR: 0x4ec5570 (libc.so.6:memchr) redirected to 0x4c2e260 (memchr)
--13911-- REDIR: 0x4ecb110 (libc.so.6:__GI_memcpy) redirected to 0x4c2ee70 (__GI_memcpy)
--13911-- REDIR: 0x4ec2d90 (libc.so.6:strcpy) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4ed0cb0 (libc.so.6:__strcpy_sse2_unaligned) redirected to 0x4c2d090 (strcpy)
==13911== Use of uninitialised value of size 8
==13911==    at 0x4C2D0B0: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== Use of uninitialised value of size 8
==13911==    at 0x4C2D0C3: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0DA: is_overlap (vg_replace_strmem.c:130)
==13911==    by 0x4C2D0DA: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0EB: is_overlap (vg_replace_strmem.c:139)
==13911==    by 0x4C2D0EB: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0ED: is_overlap (vg_replace_strmem.c:142)
==13911==    by 0x4C2D0ED: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0FC: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
--13911-- REDIR: 0x4ec1900 (libc.so.6:strcmp) redirected to 0x4a24740 (_vgnU_ifunc_wrapper)
--13911-- REDIR: 0x4f75000 (libc.so.6:__strcmp_sse42) redirected to 0x4c2e170 (__strcmp_sse42)
--13911-- REDIR: 0x4ecc990 (libc.so.6:strchrnul) redirected to 0x4c31890 (strchrnul)
--13911-- REDIR: 0x4ec60b0 (libc.so.6:__GI_mempcpy) redirected to 0x4c31aa0 (__GI_mempcpy)
--13911-- REDIR: 0x4ebc580 (libc.so.6:free) redirected to 0x4c2aea6 (free)
==13911== 
==13911== HEAP SUMMARY:
==13911==     in use at exit: 0 bytes in 0 blocks
==13911==   total heap usage: 16 allocs, 16 frees, 2,016 bytes allocated
==13911== 
==13911== All heap blocks were freed -- no leaks are possible
==13911== 
==13911== Use --track-origins=yes to see where uninitialised values come from
==13911== ERROR SUMMARY: 111 errors from 6 contexts (suppressed: 0 from 0)
==13911== 
==13911== 12 errors in context 1 of 6:
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0FC: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== 
==13911== 12 errors in context 2 of 6:
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0ED: is_overlap (vg_replace_strmem.c:142)
==13911==    by 0x4C2D0ED: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== 
==13911== 12 errors in context 3 of 6:
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0EB: is_overlap (vg_replace_strmem.c:139)
==13911==    by 0x4C2D0EB: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== 
==13911== 12 errors in context 4 of 6:
==13911== Conditional jump or move depends on uninitialised value(s)
==13911==    at 0x4C2D0DA: is_overlap (vg_replace_strmem.c:130)
==13911==    by 0x4C2D0DA: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== 
==13911== 12 errors in context 5 of 6:
==13911== Use of uninitialised value of size 8
==13911==    at 0x4C2D0C3: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== 
==13911== 51 errors in context 6 of 6:
==13911== Use of uninitialised value of size 8
==13911==    at 0x4C2D0B0: strcpy (vg_replace_strmem.c:512)
==13911==    by 0x400A79: main (Lex.c:56)
==13911== 
==13911== ERROR SUMMARY: 111 errors from 6 contexts (suppressed: 0 from 0)
